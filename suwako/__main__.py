#!/usr/bin/env python3
from discord.ext import commands
import aiosqlite
from aioosuapi import aioosuapi
import discord
import os

from suwako.modules import first_run
from suwako.manifest import VERSION
from suwako.manifest import CONTRIBUTORS

from suwako.modules.connections import bot_token as bot_token
from suwako.modules.connections import osu_api_key as osu_api_key
from suwako.modules.storage_management import database_file as database_file


if os.environ.get('SUWAKO_PREFIX'):
    command_prefix = os.environ.get('SUWAKO_PREFIX')
else:
    command_prefix = "-"

first_run.ensure_tables()

initial_extensions = [
    "suwako.cogs.BotManagement",
    "suwako.cogs.MemberManagement",
    "suwako.cogs.MemberInfoSyncing",
    "suwako.cogs.MemberStatistics",
    "suwako.cogs.MemberVerification",
]

intents = discord.Intents.default()
intents.members = True


class Suwako(commands.Bot):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.background_tasks = []

        self.app_version = VERSION
        self.project_contributors = CONTRIBUTORS

        self.description = f"Suwako {self.app_version}"
        self.database_file = database_file
        self.osu = aioosuapi(osu_api_key)

        # conn = sqlite3.connect(self.database_file)
        # c = conn.cursor()
        # self.user_extensions = tuple(c.execute("SELECT extension_name FROM user_extensions"))
        # conn.close()

        for extension in initial_extensions:
            try:
                self.load_extension(extension)
            except Exception as e:
                print(e)

        # for user_extension in self.user_extensions:
        #     try:
        #         self.load_extension(user_extension[0])
        #         print(f"User extension {user_extension[0]} loaded")
        #     except discord.ext.commands.errors.ExtensionNotFound as ex:
        #         print(ex)

    async def start(self, *args, **kwargs):
        self.db = await aiosqlite.connect(self.database_file)

        await super().start(*args, **kwargs)

    async def close(self):
        # Cancel all Task object generated by cogs.
        # This prevents any task still running due to having long sleep time.
        for task in self.background_tasks:
            task.cancel()

        # Close connection to the database
        await self.db.close()

        # Run actual discord.py close.
        await super().close()

    async def on_ready(self):
        print("Logged in as")
        print(self.user.name)
        print(self.user.id)
        print("------")
        await first_run.add_admins(self)


client = Suwako(command_prefix=command_prefix, intents=intents)
client.run(bot_token)
